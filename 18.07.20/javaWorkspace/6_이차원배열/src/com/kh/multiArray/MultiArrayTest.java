package com.kh.multiArray;

public class MultiArrayTest {
	
	public void testMethod1(){
		// 다차원 배열 사용하기
		// 다차원 배열은 일반 배열을 여러개 사용하는
		// 배열로써, 기존 배열들을 그룹으로 묶어
		// 하나의 대분류로 구성하고자 할 때 사용한다.
		
		int[] ban1 = {10, 20, 30, 40, 50};
		int[] ban2 = {60, 70, 80, 90, 100};
		int[] ban3 = {11, 21, 31, 41, 51};
		int[] ban4 = {61, 71, 81, 91, 101};
		// . . . 50개 라면...?
		
		// 위의 형태로 구성하면 배열들도 여러 개이기 때문에
		// 사용하는데 번거로움이 생긴다.
		// 따라서 위의 배열들을 하나로 묶을 수 있는
		// 2차원 배열을 선언하여 관리한다.
		// int[][] ban; // [] 두 개면 2차원 배열!
		
		/*int[][] ban = {
				{10, 20, 30, 40, 50},
				{60, 70, 80, 90, 100},
				{11, 21, 31, 41, 51},
				{61, 71, 81, 91, 101}
		};*/
		
		// 가변 배열
		// 안에 있는 배열들이 
		// 3x3, 5x5의 형태가 아닌
		// 각각의 배열들의 길이가 다른 가변 배열을
		// 구성할 수도 있다.
		int[][] ban = {
				{10, 20, 30, 40, 50},
				{60, 70, 80},
				{11, 21},
				{61}
		};
		
		int[][] dynamicBan = new int[5][];
	}
	
	public void testArray1(){
		// 5행 5열의 배열 만들기
		// 선언과 동시에 초기화 하기
		int[][] arr = {
				{1, 2, 3, 4, 5},
				{6, 7, 8, 9, 10},
				{11, 12, 13, 14, 15},
				{16, 17, 18, 19, 20},
				{21, 22, 23, 24, 25}
		};
		
	}
	
	public void testArray2(){
		// 2차원 배열 생성하기
		int[][] arr = new int[3][3];
		//- 3x3 -
		// 1 2 3
		// 4 5 6
		// 7 8 9
		
		// 2차원 배열의 내용 입력 부
		int num = 1;
		for(int i = 0 ; i < arr.length ; i++){
			for(int j = 0 ; j < arr[i].length;j++){
				arr[i][j] = num++;
			}
		}
		
		// 2차원 배열 출력부
		for(int i = 0; i <arr.length; i++){
			for(int j = 0; j <arr[i].length ; j++){
				System.out.print(arr[i][j]+" ");
			}
			System.out.println();
		}
	}
}









