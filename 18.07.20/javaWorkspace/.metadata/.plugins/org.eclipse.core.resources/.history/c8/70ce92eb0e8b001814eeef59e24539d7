package com.kh.overrideTest.model.vo;

public class Book /* extends Object */{
	// 모든 클래스는 Object 클래스를 상속받고 있다.
	// Object 클래스를 통한 Overriding 실습하기

	private String title;  // 제목
	private String author; // 저자
	private int price;     // 가격
	
	public Book(){ }
	
	public Book(String title, String author, int price){
		this.title = title;
		this.author = author;
		this.price = price;
	}
	
	// Getter & Setter
	public String getTitle(){
		return title;
	}
	
	public String getAuthor(){
		return author;
	}
	
	public int getPrice(){
		return price;
	}
	
	public void setTitle(String title){
		this.title = title;
	}
	
	public void setAuthor(String author){
		this.author = author;
	}
	
	public void setPrice(int price){
		this.price = price;
	}
	
	// public String bookInformation(){ ... }
	// toString
	// 일반적으로 객체 자신의 풀 패키지명과 해쉬코드를 16진수로
	// 변환한 결과를 합쳐 문자열로 반환하는 메소드
	// 
	// - 오버라이딩이란, 부모 클래스의 메소드와 동일한 이름
	//   동일한 반환자료형, 동일한 매개 변수 (메소드 헤드부분)를
	//   선언하여 자식이 원하는 내용을 출력할 수 있게 재정의하는 것
	// - 접근제한자를 변경할 수 있는데, 부모 메소드보다 더 큰 범위로만
	//   가능하다.
	
	@Override
	public String toString(){
		return title+", "+author+", "+price;
	}
	
	// equals 오버라이딩
	// equals 메소드는 각 객체를 비교하여 같으면 true, 다르면 false를
	// 반환하는 메소드로, 실제 안의 값을 하나하나 비교하는 것이 아니라
	// 해당 코드의 주소값을 비교하기 때문에
	// 객체 안의 값을 직접 비교하고자 할 경우
	// 반드시 오버라이딩하여 각 필드를 비교하는 
	// 메소드로 구현해 주어야 한다.
	
	@Override
	public boolean equals(Object obj){
		boolean result = true;
		
		// 객체의 주소가 같을 경우
		if(this != obj){
			result = false;
		} 
		
		// 객체의 주소가 null인 경우
		if(obj == null){
			result = false;
		}
		
		// 원본의 제목, 저자, 가격을 비교하여
		// 하나라도 다를 경우
		Book bk = (Book)obj;
		
		
		if(!this.title.equals(bk.getTitle())){
			
			result = true;
			
		} else if(!this.author.equals(bk.getAuthor())){
			
			result = true;
			
		} else if(this.price != bk.getPrice()){
			
			result = false;
		}
		
		
		return result;
	}
	
}









