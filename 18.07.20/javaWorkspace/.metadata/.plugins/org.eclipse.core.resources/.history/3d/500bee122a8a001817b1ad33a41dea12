package com.kh.member.controller;

import java.util.Scanner;

import com.kh.member.model.vo.Member;

public class MemberManager {
	// 화면과 객체를 연결하는 클래스
	
	// 회원 목록을 관리할 객체 배열
	private Member[] mArr;
	
	// 회원 배열을 최대로 담을 수 있는 공간 선언
	public static final int SIZE = 10;
	
	// 현재 값이 담겨 있는 회원 수 카운트
	private static int count;
	
	Scanner sc = new Scanner(System.in);
	
	{ // 초기화 블럭
		mArr = new Member[SIZE];
		mArr[0] = new Member("홍길동", "hong1234"
							, "pass01", "01011112222"
							, "test1@test.com", 'M', 10);
		
		mArr[1] = new Member("신사임당", "sinsa001"
				, "pass02", "01022223333"
				, "test2@test.com", 'F', 20);
		
		mArr[2] = new Member("김유신", "kim002"
				, "pass03", "01011223344"
				, "test3@test.com", 'M', 30);
		
		mArr[3] = new Member("임꺽정", "Limgguck003"
				, "pass04", "01044442222"
				, "test4@test.com", 'M', 40);
		
		// 초기화한 회원 수에 따른 카운트 변경
		count = 4; 
	}
	
	// 생성자
	public MemberManager(){ }
	
	// Setter & Getter
	public void setCount(int count){
		MemberManager.count = count;
	}
	
	public int getCount(){
		return count;
	}
	
	public void printAllMember(){
		
		for(int i = 0 ; i < count; i++){
			System.out.println(
				"["+(i+1)+"]"+mArr[i].memberInfo());
		}
		
	}
	
	// 회원 가입 기능 메소드
	public void insertMember(){
		
		if(count == SIZE) {
			System.out.println("정원 초과 입니다.");
		} else {
			
			mArr[count] = new Member();
			
			System.out.print("이름 입력 : ");
			mArr[count].setName(sc.next());
			
			System.out.print("아이디 입력 : ");
			mArr[count].setId(sc.next());
			
			System.out.print("비밀번호 입력 : ");
			mArr[count].setPassword(sc.next());
			
			System.out.print("연락처 입력 : ");
			mArr[count].setPhone(sc.next());
			
			System.out.print("이메일 입력 : ");
			mArr[count].setEmail(sc.next());
		
			System.out.print("성별 입력 (M/F) : ");
			mArr[count].setGender(sc.next().toUpperCase().charAt(0));
		
			System.out.print("나이 입력 : ");
			mArr[count].setAge(sc.nextInt());
		
			count++;
		}
	}
	
	// 회원 한 명의 아이디를 사용하여
	// 해당 회원의 인덱스를 반환하는 메소드
	public int selectMember(){
		int idx = -1; // 에러 발생 코드
		
		System.out.print("선택할 회원의 아이디 : ");
		String id = sc.next();
		
		for(int i = 0; i < count ; i++){
			if(mArr[i].getId().equals(id)){
				idx = i;
				break;
			}
		}
		
		return idx;
	}
	
	// 회원 정보 수정 기능 메소드
	public void updateMemberPassword(){
		int idx = selectMember();
		/*int idx = -1;
		
		String id = sc.next();
		
		for(int i = 0 ; i < count ; i++){
			if(mArr[i].getId().equals(id)){
				idx = i;
			}
		}*/
		
		if(idx < 0 ){
			System.out.println("해당 아이디를 가진 회원이 없습니다.");
		} else {
			System.out.println("현재 회원의 비밀번호 : ");
			System.out.println(mArr[idx].getPassword());
			System.out.print("변경할 비밀번호 : ");
			mArr[idx].setPassword(sc.next());
		}
	}
	
	public void updateMemberEmail(){
		int idx = selectMember();
		
		if(idx < 0){
			System.out.println("없는 회원입니다.");
		} else {
			System.out.println("현재 이메일 : "
					+ mArr[idx].getEmail());
			System.out.println("변경할 이메일 입력 : ");
			mArr[idx].setEmail(sc.next());
		}
	}
	
	public void updateMemberPhone(){
		
	}
	
	
	// 회원 한 명 정보 조회
	public void printOneMember(){
		int idx = selectMember();
		if(idx < 0){
			
			System.out.println("해당하는 회원은 없습니다.");
		
		} else {
			
			System.out.println(mArr[idx].memberInfo());
			
		}
	}
	
	// 회원 정보 삭제 기능 메소드
	public void deleteMember(){
		int idx = selectMember();
		
		if(idx < 0){
			System.out.println("해당하는 회원은 없는 회원입니다.");
		} else {
			System.out.print("정말로 삭제하시겠습니까? (Y/N) : ");
			char answer = sc.next().toUpperCase().charAt(0);
			
			if(answer == 'Y'){
				
				for(int i = idx; i < count ; i++){
					// 만약에 삭제하려는 회원이 마지막 회원이라면
					// 자리를 변경할 필요가 없기 때문에 그냥
					// 초기화만 수행한다.
					if(i == count - 1){
						mArr[i] = new Member();
					}
					
					// 삭제하려는 회원이 마지막 회원이 아니라면
					// 삭제하고자 하는 회원의 정보를 바로 뒤의 회원 정보로
					// 덮어 씌우고, 그 뒤의 회원 정보들을 
					// 하나씩 앞으로 당기면 해결할 수 있다.
					else {
						mArr[i] = mArr[i+1];
					}
				}
				
				count--;
				
			} else {
				
				System.out.println("메뉴 화면으로 돌아갑니다.");
				
			}
		}
	}
	
	public void sortAscName(){
		// 이름을 기준으로 오름차순 정렬하는 메소드
		
		// 각각 방의 맴버의 이름에 대한
		// 정렬을 수행하기 위해 다른 방의
		// 멤버 이름들과 한 번씩 비교한다.
		// 0 : 1 ~ 5
		// 1 : 2 ~ 5
		// 2 : 3 ~ 5
		// 3 : 4 ~ 5
		// 순차 정렬 알고리즘
		for(int i = 0 ; i < count - 1 ; i++){
			for(int j = i+1 ; j < count ; j++){
				// 두 이름 중 누가 더 크고 작은지
				// 비교하여 앞사람 이름의 유니코드(한글자 한글자)가
				// 뒷사람 이름의 유니코드보다 크다면
				// 두 이름을 가진 Member 객체의 방을 스왑한다.
				
				if(mArr[i].getName()
					.compareTo(mArr[j].getName()) < 0){
					
					Member tempMember = mArr[i];
					
				}
				
			}
		}
		
	}
	
	public void sortDescName(){
		// 이름을 기준으로 내림차순 정렬하는 메소드
		
	}
}









