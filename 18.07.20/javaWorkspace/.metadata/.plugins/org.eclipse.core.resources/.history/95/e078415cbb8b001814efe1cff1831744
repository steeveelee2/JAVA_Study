package com.kh.animal.model.vo;

import java.util.Objects;
import java.util.Scanner;

public class Animal {
	private String name;
	private String type;
	private double weight;
	
	// 생성자
	// 부모 생성자와 자식 생성자는
	// new를 통해 사용할 때 자도에으로 생성해 주지 않기 때문에
	// Class를 선언할 때 반드시 작성해주어야 한다.
	
	public Animal(){}
	
	public Animal(String name, String type, double weight){
		this.name = name;
		this.type = type;
		this.weight = weight;
	}
	
	// 3. 메소드
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public double getWeight() {
		return weight;
	}

	public void setWeight(double weight) {
		this.weight = weight;
	}
	
	// 어노테이션
	//   메소드 바로 위에 @표시와 특정 예약어를 사용함으로써
	//   프로그램이 컴파일될 때(컴퓨터 언어로 변환될 때)
	//   컴파일러에게 유의할 사항(지시할 사항)을 선언하는 표기식
	
	// - @Override : 부모로부터 받은 메소드를 재정의
	// - @Deprecated : 권장하지 않는 이전 버전의 메소드, 혹은
	//                 사라질 예정의 메소드를 정의
	// - @SuppressWarnings("경고문") : 
	//             특정 경고에 대해 무시하는 내용을 작성할 경우
	// - @FunctionalInterface: 현재 메소드가 
	//             함수형 인터페이스임을 알리는 어노테이션
	
	/*
	public void test(){
		@SuppressWarnings("unused")
		Scanner sc = new Scanner(System.in);
	}*/
	
	// Object에서 상속 받은 메소드 중
	// 재정의를 해야하는 메소드 4가지
	
	// toString()
	//   일반적으로 객체 자체를 출력할 때 자동으로 붙어서
	//   출력되는 메소드로, 객체에 대한 내용을 
	//   풀 클래스명 @ 해시코드(16진수) 으로 표현하는 메소드
	//   
	//   우리가 실제로 사용할 객체에 대한 정보를 본래의 내용으로
	//   출력할 경우 안에 어떠한 값들이 담겨 있는 지 알 수 없기 때문에
	//   이를 재정의하여 각각의 값을 표현하는 문자열로 변경하여 사용한다.
	
	@Override
	public String toString(){
		return name+", "+type+", "+weight;
	}
	
	// equals()
	//   일반적으로 equals()는 객체의 주소값만을
	//   비교하기 때문에 실제 안에 들은 값들이 모두 같을 경우를
	//   확인할 수 없다.
	//
	//   따라서 equals() 메소드를 재정의하여
	//   각각의 값이 같은지 비교하는 객체 비교용 메소드를 재정의하여
	//   사용한다.
	
	@Override
	public boolean equals(Object obj){
		
		boolean result = false;
		
		// instanceof : 두 객체를 비교하여 우측 객체로
		//              바꿀 수 있는지 따지는 연산자
		if(obj instanceof Animal){
			Animal ani = (Animal)obj;
			
			if(ani.name.equals(this.name) &&
			   ani.type.equals(this.type) &&
			   ani.weight == this.weight){
				
				result = true;
			}
		}
		
		return result;
	}
	
	// hashCode()
	//    현재 객체가 가진 값을 기준으로 hash 알고리즘을 수행하여
	//    나온 그 객체만의 값에 대한 결과를 저장하는 메소드
	// 해시코드 원칙 
	// 1. equals() 메소드로 비교한 결과가 true라면,  
	//    hashCode()의 결과도 같아야 한다.
	// 2. equals()로 비교한 결과가 false라도,
	//    hashcode()는 같을 수 있다.
	//    단, 이후에 수행될 hash 기반 메소드들을 사용하고자 한다면
	//    다르게 나오는 것이 훨씬 효율적이다.
	// 3. hashCode()의 결과가 같다고 해서 반드시 equals() 결과가
	//    같은 것은 아니다.
	//
	
	@Override
	public int hashCode() {
		// JDK 1.7 이후에 계산하는 식을 메소드화하여
		// 제공하고 있다.
		return Objects.hash(name, type, weight);
	}
	
	// clone()
	//    하나의 객체를 복사하여 다른 객체로 만드는 메소드
	//    일반적으로 Object 클래스 자체가 가진 clone()을
	//    사용할 경우, 해당 객체의 주소 값만을 복사하는 얕은 복사
	//    개념의 사본을 만들어 원본이 바뀔 경우 사본도 변경되는 
	//    기능을 수행한다.
	// 
	//    따라서, 
}










